name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger this workflow on push to the main branch
  pull_request:
    branches:
      - main # Trigger this workflow on pull request to the main branch

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (for multi-platform support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -f tdlist.Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/tdlist:latest .

      # Step 5: Push Docker image to DockerHub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/tdlist:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      # Step 1: Checkout the repository again
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up SSH
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      # Step 3: Deploy the Docker container to VM
      - name: Deploy Docker container on VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << EOF
            docker pull ${{ secrets.DOCKER_USERNAME }}/tdlist:latest
            docker run -d --name tdlist -p 80:80 ${{ secrets.DOCKER_USERNAME }}/tdlist:latest
          EOF
